// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Race {
  id         String      @id @default(uuid())
  name       String      @unique
  desc       String
  playable   Boolean
  characters Character[]
  // Race traits
  speed      Int         @default(30)
  darkvision Boolean     @default(false)
  size       Size        @default(MEDIUM)
}

model Class {
  id             String      @id @default(uuid())
  name           String      @unique
  desc           String
  hitDie         Int // e.g., 8 for d8, 12 for d12
  primaryAbility Ability
  savingThrows   Ability[]
  characters     Character[]
  spellcasting   Boolean     @default(false)
  subclasses     Subclass[]
}

model Subclass {
  id         String      @id @default(uuid())
  name       String
  desc       String
  class      Class       @relation(fields: [classId], references: [id])
  classId    String
  characters Character[]
}

model Character {
  id            String     @id @default(uuid())
  name          String
  level         Int        @default(1)
  experience    Int        @default(0)

  // Relations
  race          Race       @relation(fields: [raceId], references: [id])
  raceId        String     
  class         Class      @relation(fields: [classId], references: [id])
  classId       String
  subclass      Subclass?  @relation(fields: [subclassId], references: [id])
  subclassId    String?

  // Stats with 1-20 range enforced in application logic
  strength      Int        @default(10)
  dexterity     Int        @default(10)
  constitution  Int        @default(10)
  intelligence  Int        @default(10)
  wisdom        Int        @default(10)
  charisma      Int        @default(10)

  // Inventory and Equipment references
  inventory     Inventory?
  inventoryId   String?    // UUID reference to Inventory

  equipment     Equipment?
  equipmentId   String?    // UUID reference to Equipment

  learnedSpells CharacterSpell[]


}

model Inventory {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id])
  characterId String    @unique
  gold        Int       @default(0)
  capacity    Int       @default(20)  // Max number of item stacks
  items       Item[]

  // Since only a reference to weapon is required, no need for a direct relation to Weapon
}

model Equipment {
  id          String      @id @default(uuid())
  character   Character   @relation(fields: [characterId], references: [id])
  characterId String      @unique
  slots       EquipmentSlot[]

  // Note: Armor and Weapon are not specified as separate relations here based on Swagger requirements
}

model EquipmentSlot {
  id       String @id @default(uuid())
  slotType SlotType
  itemId   String // UUID reference to an item

  equipment Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId String
}

model Item {
  id          String    @id @default(uuid())
  name        String
  desc        String
  quantity    Int       @default(1) @db.Integer  // Number of items in the stack
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
}

model Spell {
  id            String      @id @default(uuid())
  name          String      @unique
  desc          String
  level         Int         // 0 for cantrips
  school        SpellSchool
  castingTime   String
  range         String
  components    String[]
  duration      String
  concentration Boolean     @default(false)

  characterSpells CharacterSpell[] // Relation with CharacterSpell
}

// Intermediate model for learned spells
model CharacterSpell {
  id          String     @id @default(uuid())
  character   Character  @relation(fields: [characterId], references: [id])
  characterId String
  spell       Spell      @relation(fields: [spellId], references: [id])
  spellId     String
}

model Weapon {
  id          String    @id @default(uuid())
  name        String
  desc        String
  type        weaponType
  damage      String    // e.g., "1d8"
  twohanded   Boolean   @default(false)
  versatile   Boolean   @default(true)
  range       Int?
  architype   weaponArchitype @default(SIMPLE)
}

enum SlotType {
  HEAD
  NECK
  SHOULDERS
  CHEST
  BACK
  ARMS
  HANDS
  WAIST
  LEGS
  FEET
  MAIN_HAND
  OFF_HAND
  TWO_HAND
  RING_1
  RING_2
}

enum Size {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
  GARGANTUAN
}

enum Ability {
  STRENGTH
  DEXTERITY
  CONSTITUTION
  INTELLIGENCE
  WISDOM
  CHARISMA
}

enum ArmorType {
  LIGHT
  MEDIUM
  HEAVY
  SHIELD
}

enum DamageType {
  SLASHING
  PIERCING
  BLUDGEONING
  ACID
  COLD
  FIRE
  FORCE
  LIGHTNING
  NECROTIC
  POISON
  PSYCHIC
  RADIANT
  THUNDER
}

enum SpellSchool {
  ABJURATION
  CONJURATION
  DIVINATION
  ENCHANTMENT
  EVOCATION
  ILLUSION
  NECROMANCY
  TRANSMUTATION
}

enum weaponType {
  FLAIL
  MORNINGSTAR
  RAPIER
  SCHIMITAR
  SHORTSWORD
  WARPICK
  BATTLEAXE
  LONGSWORD
  TRIDENT
  WARHAMMER
  GLAIVE
  GREATAXE
  GREATSWORD
  HALBERD
  MAUL
  PIKE
  HANDCROSSBOW
  HEAVYCROSSBOW
  LONGBOW
  CLUB
  DAGGER
  HANDAXE
  JAVELIN
  LIGHTHAMMER
  MACE
  SICKLE
  QUARTERSTAFF
  SPEAR
  GREATCLUB
  LIGHTCROSSBOW
  SHORTBOW
}

enum weaponArchitype {
  MARTIAL
  SIMPLE
}
